#![allow(non_snake_case, non_upper_case_globals, non_camel_case_types)]

extern crate core_foundation_sys;
extern crate libc;

use core_foundation_sys::string::*;
use core_foundation_sys::base::*;
use core_foundation_sys::data::*;
use core_foundation_sys::array::*;
use core_foundation_sys::dictionary::*;

pub type UInt8 = ::libc::c_uchar;
pub type SInt8 = ::libc::c_char;
pub type UInt16 = ::libc::c_ushort;
pub type SInt16 = ::libc::c_short;
pub type UInt32 = ::libc::c_uint;
pub type SInt32 = ::libc::c_int;
pub type ItemCount = ::libc::c_ulong;
pub type Byte = UInt8;
pub type UInt64 = ::libc::c_ulonglong;
pub type CFPropertyListRef = CFTypeRef;
pub type ByteCount = ::libc::c_ulong;

/* automatically generated by rust-bindgen */

pub type Enum_Unnamed1 = ::libc::c_int;
pub const kMIDIInvalidClient: ::libc::c_int = -10830;
pub const kMIDIInvalidPort: ::libc::c_int = -10831;
pub const kMIDIWrongEndpointType: ::libc::c_int = -10832;
pub const kMIDINoConnection: ::libc::c_int = -10833;
pub const kMIDIUnknownEndpoint: ::libc::c_int = -10834;
pub const kMIDIUnknownProperty: ::libc::c_int = -10835;
pub const kMIDIWrongPropertyType: ::libc::c_int = -10836;
pub const kMIDINoCurrentSetup: ::libc::c_int = -10837;
pub const kMIDIMessageSendErr: ::libc::c_int = -10838;
pub const kMIDIServerStartErr: ::libc::c_int = -10839;
pub const kMIDISetupFormatErr: ::libc::c_int = -10840;
pub const kMIDIWrongThread: ::libc::c_int = -10841;
pub const kMIDIObjectNotFound: ::libc::c_int = -10842;
pub const kMIDIIDNotUnique: ::libc::c_int = -10843;
pub const kMIDINotPermitted: ::libc::c_int = -10844;
pub type MIDIObjectRef = UInt32;
pub type MIDIClientRef = MIDIObjectRef;
pub type MIDIPortRef = MIDIObjectRef;
pub type MIDIDeviceRef = MIDIObjectRef;
pub type MIDIEntityRef = MIDIObjectRef;
pub type MIDIEndpointRef = MIDIObjectRef;
pub type MIDITimeStamp = UInt64;
pub type Enum_Unnamed2 = ::libc::c_int;
pub const kMIDIObjectType_Other: ::libc::c_int = -1;
pub const kMIDIObjectType_Device: ::libc::c_int = 0;
pub const kMIDIObjectType_Entity: ::libc::c_int = 1;
pub const kMIDIObjectType_Source: ::libc::c_int = 2;
pub const kMIDIObjectType_Destination: ::libc::c_int = 3;
pub const kMIDIObjectType_ExternalMask: ::libc::c_int = 16;
pub const kMIDIObjectType_ExternalDevice: ::libc::c_int = 16;
pub const kMIDIObjectType_ExternalEntity: ::libc::c_int = 17;
pub const kMIDIObjectType_ExternalSource: ::libc::c_int = 18;
pub const kMIDIObjectType_ExternalDestination: ::libc::c_int = 19;
pub type MIDIObjectType = SInt32;
pub type MIDIUniqueID = SInt32;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const kMIDIInvalidUniqueID: ::libc::c_uint = 0;
pub type MIDIPacketList = Struct_MIDIPacketList;
pub type MIDISysexSendRequest = Struct_MIDISysexSendRequest;
pub type MIDINotification = Struct_MIDINotification;
pub type MIDINotifyProc =
    ::std::option::Option<extern "C" fn(message: *const MIDINotification,
                                        refCon: *mut ::libc::c_void) -> ()>;
pub type MIDIReadProc =
    ::std::option::Option<extern "C" fn(pktlist: *const MIDIPacketList,
                                        readProcRefCon: *mut ::libc::c_void,
                                        srcConnRefCon: *mut ::libc::c_void)
                              -> ()>;
pub type MIDICompletionProc =
    ::std::option::Option<extern "C" fn(request: *mut MIDISysexSendRequest)
                              -> ()>;
#[repr(C)]
#[repr(packed)]
#[derive(Copy)]
pub struct Struct_MIDIPacket {
    pub timeStamp: MIDITimeStamp,
    pub length: UInt16,
    pub data: [Byte; 256usize],
}
impl ::std::clone::Clone for Struct_MIDIPacket {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIPacket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIPacket = Struct_MIDIPacket;
#[repr(C)]
#[repr(packed)]
#[derive(Copy)]
pub struct Struct_MIDIPacketList {
    pub numPackets: UInt32,
    pub packet: [MIDIPacket; 1usize],
}
impl ::std::clone::Clone for Struct_MIDIPacketList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIPacketList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[repr(packed)]
#[derive(Copy)]
pub struct Struct_MIDISysexSendRequest {
    pub destination: MIDIEndpointRef,
    pub data: *const Byte,
    pub bytesToSend: UInt32,
    pub complete: Boolean,
    pub reserved: [Byte; 3usize],
    pub completionProc: MIDICompletionProc,
    pub completionRefCon: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_MIDISysexSendRequest {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDISysexSendRequest {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed4 = ::libc::c_uint;
pub const kMIDIMsgSetupChanged: ::libc::c_uint = 1;
pub const kMIDIMsgObjectAdded: ::libc::c_uint = 2;
pub const kMIDIMsgObjectRemoved: ::libc::c_uint = 3;
pub const kMIDIMsgPropertyChanged: ::libc::c_uint = 4;
pub const kMIDIMsgThruConnectionsChanged: ::libc::c_uint = 5;
pub const kMIDIMsgSerialPortOwnerChanged: ::libc::c_uint = 6;
pub const kMIDIMsgIOError: ::libc::c_uint = 7;
pub type MIDINotificationMessageID = SInt32;
#[repr(C)]
#[repr(packed)]
#[derive(Copy)]
pub struct Struct_MIDINotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
}
impl ::std::clone::Clone for Struct_MIDINotification {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDINotification {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[repr(packed)]
#[derive(Copy)]
pub struct Struct_MIDIObjectAddRemoveNotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
    pub parent: MIDIObjectRef,
    pub parentType: MIDIObjectType,
    pub child: MIDIObjectRef,
    pub childType: MIDIObjectType,
}
impl ::std::clone::Clone for Struct_MIDIObjectAddRemoveNotification {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIObjectAddRemoveNotification {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIObjectAddRemoveNotification =
    Struct_MIDIObjectAddRemoveNotification;
#[repr(C)]
#[repr(packed)]
#[derive(Copy)]
pub struct Struct_MIDIObjectPropertyChangeNotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
    pub object: MIDIObjectRef,
    pub objectType: MIDIObjectType,
    pub propertyName: CFStringRef,
}
impl ::std::clone::Clone for Struct_MIDIObjectPropertyChangeNotification {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIObjectPropertyChangeNotification {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIObjectPropertyChangeNotification =
    Struct_MIDIObjectPropertyChangeNotification;
#[repr(C)]
#[repr(packed)]
#[derive(Copy)]
pub struct Struct_MIDIIOErrorNotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
    pub driverDevice: MIDIDeviceRef,
    pub errorCode: OSStatus,
}
impl ::std::clone::Clone for Struct_MIDIIOErrorNotification {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIIOErrorNotification {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIIOErrorNotification = Struct_MIDIIOErrorNotification;
pub type MIDISetupRef = MIDIObjectRef;
pub type MIDIThruConnectionRef = MIDIObjectRef;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_MIDIValueMap {
    pub value: [UInt8; 128usize],
}
impl ::std::clone::Clone for Struct_MIDIValueMap {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIValueMap {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIValueMap = Struct_MIDIValueMap;
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const kMIDITransform_None: ::libc::c_uint = 0;
pub const kMIDITransform_FilterOut: ::libc::c_uint = 1;
pub const kMIDITransform_MapControl: ::libc::c_uint = 2;
pub const kMIDITransform_Add: ::libc::c_uint = 8;
pub const kMIDITransform_Scale: ::libc::c_uint = 9;
pub const kMIDITransform_MinValue: ::libc::c_uint = 10;
pub const kMIDITransform_MaxValue: ::libc::c_uint = 11;
pub const kMIDITransform_MapValue: ::libc::c_uint = 12;
pub type MIDITransformType = UInt16;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const kMIDIThruConnection_MaxEndpoints: ::libc::c_uint = 8;
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const kMIDIControlType_7Bit: ::libc::c_uint = 0;
pub const kMIDIControlType_14Bit: ::libc::c_uint = 1;
pub const kMIDIControlType_7BitRPN: ::libc::c_uint = 2;
pub const kMIDIControlType_14BitRPN: ::libc::c_uint = 3;
pub const kMIDIControlType_7BitNRPN: ::libc::c_uint = 4;
pub const kMIDIControlType_14BitNRPN: ::libc::c_uint = 5;
pub type MIDITransformControlType = UInt8;
#[repr(C)]
#[repr(packed)]
#[derive(Copy)]
pub struct Struct_MIDITransform {
    pub transform: MIDITransformType,
    pub param: SInt16,
}
impl ::std::clone::Clone for Struct_MIDITransform {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDITransform {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDITransform = Struct_MIDITransform;
#[repr(C)]
#[repr(packed)]
#[derive(Copy)]
pub struct Struct_MIDIControlTransform {
    pub controlType: MIDITransformControlType,
    pub remappedControlType: MIDITransformControlType,
    pub controlNumber: UInt16,
    pub transform: MIDITransformType,
    pub param: SInt16,
}
impl ::std::clone::Clone for Struct_MIDIControlTransform {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIControlTransform {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIControlTransform = Struct_MIDIControlTransform;
#[repr(C)]
#[repr(packed)]
#[derive(Copy)]
pub struct Struct_MIDIThruConnectionEndpoint {
    pub endpointRef: MIDIEndpointRef,
    pub uniqueID: MIDIUniqueID,
}
impl ::std::clone::Clone for Struct_MIDIThruConnectionEndpoint {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIThruConnectionEndpoint {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIThruConnectionEndpoint = Struct_MIDIThruConnectionEndpoint;
#[repr(C)]
#[repr(packed)]
#[derive(Copy)]
pub struct Struct_MIDIThruConnectionParams {
    pub version: UInt32,
    pub numSources: UInt32,
    pub sources: [MIDIThruConnectionEndpoint; 8usize],
    pub numDestinations: UInt32,
    pub destinations: [MIDIThruConnectionEndpoint; 8usize],
    pub channelMap: [UInt8; 16usize],
    pub lowVelocity: UInt8,
    pub highVelocity: UInt8,
    pub lowNote: UInt8,
    pub highNote: UInt8,
    pub noteNumber: MIDITransform,
    pub velocity: MIDITransform,
    pub keyPressure: MIDITransform,
    pub channelPressure: MIDITransform,
    pub programChange: MIDITransform,
    pub pitchBend: MIDITransform,
    pub filterOutSysEx: UInt8,
    pub filterOutMTC: UInt8,
    pub filterOutBeatClock: UInt8,
    pub filterOutTuneRequest: UInt8,
    pub reserved2: [UInt8; 3usize],
    pub filterOutAllControls: UInt8,
    pub numControlTransforms: UInt16,
    pub numMaps: UInt16,
    pub reserved3: [UInt16; 4usize],
}
impl ::std::clone::Clone for Struct_MIDIThruConnectionParams {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIThruConnectionParams {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIThruConnectionParams = Struct_MIDIThruConnectionParams;
#[link(name = "CoreMIDI", kind = "framework")]
extern "C" {
    pub static kMIDIPropertyName: CFStringRef;
    pub static kMIDIPropertyManufacturer: CFStringRef;
    pub static kMIDIPropertyModel: CFStringRef;
    pub static kMIDIPropertyUniqueID: CFStringRef;
    pub static kMIDIPropertyDeviceID: CFStringRef;
    pub static kMIDIPropertyReceiveChannels: CFStringRef;
    pub static kMIDIPropertyTransmitChannels: CFStringRef;
    pub static kMIDIPropertyMaxSysExSpeed: CFStringRef;
    pub static kMIDIPropertyAdvanceScheduleTimeMuSec: CFStringRef;
    pub static kMIDIPropertyIsEmbeddedEntity: CFStringRef;
    pub static kMIDIPropertyIsBroadcast: CFStringRef;
    pub static kMIDIPropertySingleRealtimeEntity: CFStringRef;
    pub static kMIDIPropertyConnectionUniqueID: CFStringRef;
    pub static kMIDIPropertyOffline: CFStringRef;
    pub static kMIDIPropertyPrivate: CFStringRef;
    pub static kMIDIPropertyDriverOwner: CFStringRef;
    pub static kMIDIPropertyFactoryPatchNameFile: CFStringRef;
    pub static kMIDIPropertyUserPatchNameFile: CFStringRef;
    pub static kMIDIPropertyNameConfiguration: CFStringRef;
    pub static kMIDIPropertyImage: CFStringRef;
    pub static kMIDIPropertyDriverVersion: CFStringRef;
    pub static kMIDIPropertySupportsGeneralMIDI: CFStringRef;
    pub static kMIDIPropertySupportsMMC: CFStringRef;
    pub static kMIDIPropertyCanRoute: CFStringRef;
    pub static kMIDIPropertyReceivesClock: CFStringRef;
    pub static kMIDIPropertyReceivesMTC: CFStringRef;
    pub static kMIDIPropertyReceivesNotes: CFStringRef;
    pub static kMIDIPropertyReceivesProgramChanges: CFStringRef;
    pub static kMIDIPropertyReceivesBankSelectMSB: CFStringRef;
    pub static kMIDIPropertyReceivesBankSelectLSB: CFStringRef;
    pub static kMIDIPropertyTransmitsClock: CFStringRef;
    pub static kMIDIPropertyTransmitsMTC: CFStringRef;
    pub static kMIDIPropertyTransmitsNotes: CFStringRef;
    pub static kMIDIPropertyTransmitsProgramChanges: CFStringRef;
    pub static kMIDIPropertyTransmitsBankSelectMSB: CFStringRef;
    pub static kMIDIPropertyTransmitsBankSelectLSB: CFStringRef;
    pub static kMIDIPropertyPanDisruptsStereo: CFStringRef;
    pub static kMIDIPropertyIsSampler: CFStringRef;
    pub static kMIDIPropertyIsDrumMachine: CFStringRef;
    pub static kMIDIPropertyIsMixer: CFStringRef;
    pub static kMIDIPropertyIsEffectUnit: CFStringRef;
    pub static kMIDIPropertyMaxReceiveChannels: CFStringRef;
    pub static kMIDIPropertyMaxTransmitChannels: CFStringRef;
    pub static kMIDIPropertyDriverDeviceEditorApp: CFStringRef;
    pub static kMIDIPropertySupportsShowControl: CFStringRef;
    pub static kMIDIPropertyDisplayName: CFStringRef;
}
#[link(name = "CoreMIDI", kind = "framework")]
extern "C" {
    pub fn MIDIClientCreate(name: CFStringRef, notifyProc: MIDINotifyProc,
                            notifyRefCon: *mut ::libc::c_void,
                            outClient: *mut MIDIClientRef) -> OSStatus;
    pub fn MIDIClientDispose(client: MIDIClientRef) -> OSStatus;
    pub fn MIDIInputPortCreate(client: MIDIClientRef, portName: CFStringRef,
                               readProc: MIDIReadProc,
                               refCon: *mut ::libc::c_void,
                               outPort: *mut MIDIPortRef) -> OSStatus;
    pub fn MIDIOutputPortCreate(client: MIDIClientRef, portName: CFStringRef,
                                outPort: *mut MIDIPortRef) -> OSStatus;
    pub fn MIDIPortDispose(port: MIDIPortRef) -> OSStatus;
    pub fn MIDIPortConnectSource(port: MIDIPortRef, source: MIDIEndpointRef,
                                 connRefCon: *mut ::libc::c_void) -> OSStatus;
    pub fn MIDIPortDisconnectSource(port: MIDIPortRef,
                                    source: MIDIEndpointRef) -> OSStatus;
    pub fn MIDIGetNumberOfDevices() -> ItemCount;
    pub fn MIDIGetDevice(deviceIndex0: ItemCount) -> MIDIDeviceRef;
    pub fn MIDIDeviceGetNumberOfEntities(device: MIDIDeviceRef) -> ItemCount;
    pub fn MIDIDeviceGetEntity(device: MIDIDeviceRef, entityIndex0: ItemCount)
     -> MIDIEntityRef;
    pub fn MIDIEntityGetNumberOfSources(entity: MIDIEntityRef) -> ItemCount;
    pub fn MIDIEntityGetSource(entity: MIDIEntityRef, sourceIndex0: ItemCount)
     -> MIDIEndpointRef;
    pub fn MIDIEntityGetNumberOfDestinations(entity: MIDIEntityRef)
     -> ItemCount;
    pub fn MIDIEntityGetDestination(entity: MIDIEntityRef,
                                    destIndex0: ItemCount) -> MIDIEndpointRef;
    pub fn MIDIEntityGetDevice(inEntity: MIDIEntityRef,
                               outDevice: *mut MIDIDeviceRef) -> OSStatus;
    pub fn MIDIGetNumberOfSources() -> ItemCount;
    pub fn MIDIGetSource(sourceIndex0: ItemCount) -> MIDIEndpointRef;
    pub fn MIDIGetNumberOfDestinations() -> ItemCount;
    pub fn MIDIGetDestination(destIndex0: ItemCount) -> MIDIEndpointRef;
    pub fn MIDIEndpointGetEntity(inEndpoint: MIDIEndpointRef,
                                 outEntity: *mut MIDIEntityRef) -> OSStatus;
    pub fn MIDIDestinationCreate(client: MIDIClientRef, name: CFStringRef,
                                 readProc: MIDIReadProc,
                                 refCon: *mut ::libc::c_void,
                                 outDest: *mut MIDIEndpointRef) -> OSStatus;
    pub fn MIDISourceCreate(client: MIDIClientRef, name: CFStringRef,
                            outSrc: *mut MIDIEndpointRef) -> OSStatus;
    pub fn MIDIEndpointDispose(endpt: MIDIEndpointRef) -> OSStatus;
    pub fn MIDIGetNumberOfExternalDevices() -> ItemCount;
    pub fn MIDIGetExternalDevice(deviceIndex0: ItemCount) -> MIDIDeviceRef;
    pub fn MIDIObjectGetIntegerProperty(obj: MIDIObjectRef,
                                        propertyID: CFStringRef,
                                        outValue: *mut SInt32) -> OSStatus;
    pub fn MIDIObjectSetIntegerProperty(obj: MIDIObjectRef,
                                        propertyID: CFStringRef,
                                        value: SInt32) -> OSStatus;
    pub fn MIDIObjectGetStringProperty(obj: MIDIObjectRef,
                                       propertyID: CFStringRef,
                                       str: *mut CFStringRef) -> OSStatus;
    pub fn MIDIObjectSetStringProperty(obj: MIDIObjectRef,
                                       propertyID: CFStringRef,
                                       str: CFStringRef) -> OSStatus;
    pub fn MIDIObjectGetDataProperty(obj: MIDIObjectRef,
                                     propertyID: CFStringRef,
                                     outData: *mut CFDataRef) -> OSStatus;
    pub fn MIDIObjectSetDataProperty(obj: MIDIObjectRef,
                                     propertyID: CFStringRef, data: CFDataRef)
     -> OSStatus;
    pub fn MIDIObjectGetDictionaryProperty(obj: MIDIObjectRef,
                                           propertyID: CFStringRef,
                                           outDict: *mut CFDictionaryRef)
     -> OSStatus;
    pub fn MIDIObjectSetDictionaryProperty(obj: MIDIObjectRef,
                                           propertyID: CFStringRef,
                                           data: CFDictionaryRef) -> OSStatus;
    pub fn MIDIObjectGetProperties(obj: MIDIObjectRef,
                                   outProperties: *mut CFPropertyListRef,
                                   deep: Boolean) -> OSStatus;
    pub fn MIDIObjectRemoveProperty(obj: MIDIObjectRef,
                                    propertyID: CFStringRef) -> OSStatus;
    pub fn MIDIObjectFindByUniqueID(inUniqueID: MIDIUniqueID,
                                    outObject: *mut MIDIObjectRef,
                                    outObjectType: *mut MIDIObjectType)
     -> OSStatus;
    pub fn MIDISend(port: MIDIPortRef, dest: MIDIEndpointRef,
                    pktlist: *const MIDIPacketList) -> OSStatus;
    pub fn MIDISendSysex(request: *mut MIDISysexSendRequest) -> OSStatus;
    pub fn MIDIReceived(src: MIDIEndpointRef, pktlist: *const MIDIPacketList)
     -> OSStatus;
    pub fn MIDIFlushOutput(dest: MIDIEndpointRef) -> OSStatus;
    pub fn MIDIRestart() -> OSStatus;
    pub fn MIDIPacketListInit(pktlist: *mut MIDIPacketList)
     -> *mut MIDIPacket;
    pub fn MIDIPacketListAdd(pktlist: *mut MIDIPacketList,
                             listSize: ByteCount, curPacket: *mut MIDIPacket,
                             time: MIDITimeStamp, nData: ByteCount,
                             data: *const Byte) -> *mut MIDIPacket;
    pub fn MIDISetupCreate(outSetup: *mut MIDISetupRef) -> OSStatus;
    pub fn MIDISetupDispose(setup: MIDISetupRef) -> OSStatus;
    pub fn MIDISetupInstall(setup: MIDISetupRef) -> OSStatus;
    pub fn MIDISetupGetCurrent(outSetup: *mut MIDISetupRef) -> OSStatus;
    pub fn MIDISetupToData(setup: MIDISetupRef, outData: *mut CFDataRef)
     -> OSStatus;
    pub fn MIDISetupFromData(data: CFDataRef, outSetup: *mut MIDISetupRef)
     -> OSStatus;
    pub fn MIDIDeviceAddEntity(device: MIDIDeviceRef, name: CFStringRef,
                               embedded: Boolean,
                               numSourceEndpoints: ItemCount,
                               numDestinationEndpoints: ItemCount,
                               newEntity: *mut MIDIEntityRef) -> OSStatus;
    pub fn MIDIDeviceRemoveEntity(device: MIDIDeviceRef,
                                  entity: MIDIEntityRef) -> OSStatus;
    pub fn MIDIEntityAddOrRemoveEndpoints(entity: MIDIEntityRef,
                                          numSourceEndpoints: ItemCount,
                                          numDestinationEndpoints: ItemCount)
     -> OSStatus;
    pub fn MIDISetupAddDevice(device: MIDIDeviceRef) -> OSStatus;
    pub fn MIDISetupRemoveDevice(device: MIDIDeviceRef) -> OSStatus;
    pub fn MIDISetupAddExternalDevice(device: MIDIDeviceRef) -> OSStatus;
    pub fn MIDISetupRemoveExternalDevice(device: MIDIDeviceRef) -> OSStatus;
    pub fn MIDIGetSerialPortOwner(portName: CFStringRef,
                                  outDriverName: *mut CFStringRef)
     -> OSStatus;
    pub fn MIDISetSerialPortOwner(portName: CFStringRef,
                                  driverName: CFStringRef) -> OSStatus;
    pub fn MIDIGetSerialPortDrivers(outDriverNames: *mut CFArrayRef)
     -> OSStatus;
    pub fn MIDIExternalDeviceCreate(name: CFStringRef,
                                    manufacturer: CFStringRef,
                                    model: CFStringRef,
                                    outDevice: *mut MIDIDeviceRef)
     -> OSStatus;
    pub fn MIDIThruConnectionParamsInitialize(inConnectionParams:
                                                  *mut MIDIThruConnectionParams)
     -> ();
    pub fn MIDIThruConnectionCreate(inPersistentOwnerID: CFStringRef,
                                    inConnectionParams: CFDataRef,
                                    outConnection: *mut MIDIThruConnectionRef)
     -> OSStatus;
    pub fn MIDIThruConnectionDispose(connection: MIDIThruConnectionRef)
     -> OSStatus;
    pub fn MIDIThruConnectionGetParams(connection: MIDIThruConnectionRef,
                                       outConnectionParams: *mut CFDataRef)
     -> OSStatus;
    pub fn MIDIThruConnectionSetParams(connection: MIDIThruConnectionRef,
                                       inConnectionParams: CFDataRef)
     -> OSStatus;
    pub fn MIDIThruConnectionFind(inPersistentOwnerID: CFStringRef,
                                  outConnectionList: *mut CFDataRef)
     -> OSStatus;
}
